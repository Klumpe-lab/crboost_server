Bootstrap: docker
From: public.ecr.aws/ubuntu/ubuntu:20.04

%labels
    Author Sven Klumpe & Artem Kushner
    Maintainer sven.klumpe@imp.ac.at|artem.kushner@imp.ac.at
    URL https://cryoboost.readthedocs.io
    Description Cryoboost container for cryo-ET image processing

%environment
    export BASH_ENV=/opt/etc/bashrc
    export CRYOBOOST_HOME=/opt/CryoBoost
    export RELION_HOME=/opt/relion-5.0
    export CUDA_HOME=/usr/local/cuda-11.8

    # Construct paths from scratch for a clean environment
    export CONDA_ENV_PATH=/opt/miniconda3/envs/cryoboost
    export PATH="$CONDA_ENV_PATH/bin:/opt/miniconda3/bin:$RELION_HOME/build/bin:$CRYOBOOST_HOME/bin:$CUDA_HOME/bin:$PATH"
    export PYTHONPATH=$CRYOBOOST_HOME

    # 1. Conda Environment Libs (for Python packages like pandas)
    # 2. RELION Libs
    # 3. CUDA Libs
    export LD_LIBRARY_PATH="$CONDA_ENV_PATH/lib:$RELION_HOME/build/lib:$CUDA_HOME/lib64"

    export QT_X11_NO_MITSHM=1
    export QT_GRAPHICSSYSTEM="native"
    export DISPLAY=${DISPLAY:-:0.0}

%post
    # Set non-interactive mode for apt and conda
    export DEBIAN_FRONTEND=noninteractive
    export CONDA_ALWAYS_YES=true
    export CONDA_AUTO_ACTIVATE_BASE=false

    # 1. Install ALL system dependencies
    apt-get update && apt-get install -y \
        wget \
        git \
        build-essential \
        cmake \
        libfftw3-dev \
        libtiff5-dev \
        openmpi-bin \
        libopenmpi-dev \
        libpng-dev \
        software-properties-common \
        ca-certificates \
        gnupg \
        lsb-release \
        munge \
        libmunge-dev \
        libxrender1 libxtst6 libxi6 libxkbcommon-x11-0 \
        libxcb-xinerama0 libgl1-mesa-glx libegl1-mesa \
        libxkbcommon0 libxcb-icccm4 libxcb-image0 \
        libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
        libxcb-shape0 libxcb-xfixes0 \
        csh tcsh \
        && rm -rf /var/lib/apt/lists/*

    # 2. Install CUDA
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.0-1_all.deb
    dpkg -i cuda-keyring_1.0-1_all.deb
    apt-get update
    apt-get install -y cuda-toolkit-11-8
    rm cuda-keyring_1.0-1_all.deb

    # 3. Install Miniconda and create the Python environment
    export PATH="/opt/miniconda3/bin/:$PATH"
    cd /opt
    mkdir -p miniconda3
    wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O /opt/miniconda3/miniconda.sh
    bash /opt/miniconda3/miniconda.sh -b -u -p /opt/miniconda3
    rm -rf /opt/miniconda3/miniconda.sh

    conda init bash
    conda config --set always_yes true
    conda config --add channels conda-forge
    conda config --set channel_priority strict
    conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/main
    conda tos accept --override-channels --channel https://repo.anaconda.com/pkgs/r

    conda create -n cryoboost python=3.11.8 libstdcxx-ng

    # 4. Build RELION against the new Python environment
    echo "Installing RELION 5 from source..."
    cd /opt
    git clone https://github.com/3dem/relion.git relion-5.0
    cd relion-5.0
    mkdir build
    cd build
    cmake -DPYTHON_EXECUTABLE=/opt/miniconda3/envs/cryoboost/bin/python -DENABLE_MPI=ON -DCUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.8 -DGUI=OFF ..
    make -j$(nproc)
    make install
    echo "RELION 5 installation complete."

    # 5. Activate the environment and install Python packages
    echo "#! /bin/bash" > ~/.bashrc
    echo "" >> ~/.bashrc
    conda init bash
    echo "" >> ~/.bashrc
    echo "conda activate cryoboost" >> ~/.bashrc
    mkdir -p /opt/etc/
    cp ~/.bashrc /opt/etc/bashrc
    . /opt/etc/bashrc
    conda activate cryoboost

    pip3 install torch==2.2.1 torchvision==0.17.1 torchaudio==2.2.1 --index-url https://download.pytorch.org/whl/cu118
    conda install -c fastai fastai==2.7.14
    pip install --force-reinstall numpy==1.26.3
    conda config --set channel_priority flexible
    conda install -c conda-forge pyqt=6 qt6-main
    conda config --set channel_priority strict
    pip install starfile biopython scikit-learn scikit-image wget napari
    conda install -c conda-forge pymol-open-source
    conda install conda-forge::timm
    conda install seaborn mrcfile
    conda install sphinx sphinx_rtd_theme
    pip install sphinx-togglebutton

    #echo "Installing PyInstaller..."
    #conda install pyinstaller

    # 6. Install CryoBoost itself
    cd /opt/
    echo "Cloning main CryoBoost repository..."
    git clone https://github.com/FlorianBeckOle/CryoBoost.git
    cd CryoBoost

    chmod +x /opt/CryoBoost/bin/crboost_pipe.py
    chmod +x /opt/CryoBoost/bin/*

    #Deprecated:  Build Standalone Executables from CryoBoost scripts 
    #echo "Building self-contained executables..."
    #cd /opt/CryoBoost/bin
    ## Loop through each crboost python script and build it as a single file
    #for SCRIPT in crboost_*.py; do
    #    echo "--> Processing $SCRIPT"
    #    pyinstaller --onefile --clean "$SCRIPT"
    #done
    #echo "Executable build complete. Files are in /opt/CryoBoost/bin/dist/"

    cat > /opt/CryoBoost/.cbenv << 'EOF'
export CRYOBOOST_HOME=/opt/CryoBoost
export CRYOBOOST_PYTHON_PATH=/opt/miniconda3/envs/cryoboost/bin/python
export PYTHONPATH=$CRYOBOOST_HOME
export PATH=$CRYOBOOST_HOME/bin:$PATH
EOF

    echo "source /opt/CryoBoost/.cbenv" >> ~/.bashrc

    conda clean -a

%runscript
    #!/bin/bash
    export PATH="/opt/miniconda3/bin/:$PATH"
    . /opt/miniconda3/etc/profile.d/conda.sh
    conda activate cryoboost
    source /opt/CryoBoost/.cbenv

    echo "--> Container runscript executing: crboost_pipe.py $@"
    exec crboost_pipe.py "$@"

%test
    source /opt/CryoBoost/.cbenv
    python -c "import torch; print(f'PyTorch version: {torch.__version__}'); print(f'CUDA available: {torch.cuda.is_available()}')"
    python -c "import fastai; print(f'FastAI version: {fastai.__version__}')"
    echo "Testing for RELION installation..."
    relion_pipeliner --version

%help
    # CryoBoost Container
    This container provides a complete environment for CryoBoost and RELION.
    It should be run with a driver script that bind-mounts custom lab
    configurations for schemes, qsub scripts, and adapters.
