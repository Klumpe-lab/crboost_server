Bootstrap: docker
From: nvcr.io/nvidia/cuda:11.8.0-devel-ubuntu20.04


%environment
    # Set the environment for runtime
    export PATH="/opt/aretomo2/bin:/opt/conda/envs/warp/bin:$PATH"
    export LD_LIBRARY_PATH="/opt/conda/envs/warp/lib:/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
    export CUDA_PATH="/usr/local/cuda"
    export CUDA_HOME="/usr/local/cuda"
    export CUDA_ROOT="/usr/local/cuda"
    
    # Set compiler paths
    export CC=/usr/bin/gcc-11
    export CXX=/usr/bin/g++-11

%post
    echo "=== STARTING POST-INSTALL SECTION ==="
    echo "Timestamp: $(date)"
    
    # Set non-interactive frontend for package managers
    export DEBIAN_FRONTEND=noninteractive
    export TZ=Europe/Vienna
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

    # Update and install build dependencies
    apt-get update || { echo "FAILED: apt-get update"; exit 1; }
    
    apt-get install -y --no-install-recommends \
        wget \
        curl \
        git \
        build-essential \
        software-properties-common \
        ca-certificates \
        pkg-config \
        vim \
        sed \
        libfontconfig1 \
        && rm -rf /var/lib/apt/lists/* || { echo "FAILED: Installing basic deps"; exit 1; }

    # Install GCC 11
    add-apt-repository ppa:ubuntu-toolchain-r/test -y || { echo "FAILED: Adding GCC repo"; exit 1; }
    apt-get update || { echo "FAILED: apt-get update for GCC"; exit 1; }
    apt-get install -y --no-install-recommends gcc-11 g++-11 || { echo "FAILED: Installing GCC-11"; exit 1; }
    rm -rf /var/lib/apt/lists/*
    
    # Set GCC 11 as the default compiler
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 60 \
                        --slave /usr/bin/g++ g++ /usr/bin/g++-11 || { echo "FAILED: Setting GCC alternatives"; exit 1; }

    # Verify installations
    nvcc --version || { echo "FAILED: nvcc not found"; exit 1; }
    gcc --version || { echo "FAILED: gcc not working"; exit 1; }

    #----- Install Miniconda and Warp -----#
    echo "=== INSTALLING MINICONDA AND WARP ==="
    wget -q https://repo.anaconda.com/miniconda/Miniconda3-py39_23.3.1-0-Linux-x86_64.sh -O /tmp/miniconda.sh || { echo "FAILED: Downloading Miniconda"; exit 1; }
    bash /tmp/miniconda.sh -b -p /opt/conda || { echo "FAILED: Installing Miniconda"; exit 1; }
    rm /tmp/miniconda.sh
    
    export PATH="/opt/conda/bin:$PATH"
    conda config --set always_yes true
    conda config --set auto_activate_base false
    conda install -n base mamba -c conda-forge || { echo "FAILED: Installing mamba"; exit 1; }
    
    echo "=== CREATING WARP CONDA ENVIRONMENT ==="
    mamba create -n warp warp -c warpem -c pytorch -c conda-forge -c nvidia || { echo "FAILED: Creating Warp environment"; exit 1; }
    echo "Warp environment created successfully"
    
    # Test Warp installation
    echo "=== TESTING WARP INSTALLATION ==="
    /opt/conda/envs/warp/bin/WarpTools --help > /dev/null 2>&1 || echo "WARNING: WarpTools execution test failed"
    echo "Warp installation test completed"

    #----- Install AreTomo v1.0.0 from GitHub Source -----#
    echo "=== INSTALLING ARETOMO V1.0.0 FROM GITHUB SOURCE ==="
    mkdir -p /opt/aretomo2/bin
    cd /tmp
    
    # Clean up any previous attempt before cloning
    rm -rf AreTomo2
    
    git clone https://github.com/czimaginginstitute/AreTomo2.git
    cd AreTomo2
    git checkout v1.0.0
    
    export CUDAHOME=/usr/local/cuda
    export PATH="/usr/local/cuda/bin:$PATH"
    export LD_LIBRARY_PATH="/usr/local/cuda/lib64:$LD_LIBRARY_PATH"

    # --- PATCHING MAKEFILE TO DISABLE PIE ---
    echo "=== PATCHING MAKEFILE11 WITH -no-pie FLAG ==="
    # This command finds the linker line and adds "-no-pie" before the output file option "-o"
    sed -i 's|-o AreTomo2|-no-pie -o AreTomo2|' makefile11
    echo "Makefile patched successfully."
    
    echo "=== STARTING ARETOMO MAIN COMPILATION ==="
    make exe -f makefile11 \
        CUDAHOME=/usr/local/cuda \
        PRJLIB=./Lib || { echo "FAILED: Make compilation"; exit 1; }
    echo "Compilation completed successfully"
    
    # Verify and move the compiled binary
    if [ -f AreTomo2 ]; then
        mv AreTomo2 /opt/aretomo2/bin/
        chmod +x /opt/aretomo2/bin/AreTomo2
        ln -s /opt/aretomo2/bin/AreTomo2 /usr/local/bin/AreTomo
    else
        echo "ERROR: AreTomo2 binary not found after compilation!"
        exit 1
    fi

    #----- Final Cleanup -----#
    cd /
    rm -rf /tmp/AreTomo2
    /opt/conda/bin/conda clean -all -y
    apt-get clean
    echo "=== POST-INSTALL SECTION COMPLETED SUCCESSFULLY ==="

%runscript
    #!/bin/bash
    export PATH="/opt/aretomo2/bin:/opt/conda/envs/warp/bin:$PATH"
    export LD_LIBRARY_PATH="/opt/conda/envs/warp/lib:/usr/local/cuda/lib64:$LD_LIBRARY_PATH"
    exec "$@"

%test
    echo "=== CONTAINER TESTING ==="
    gcc --version
    nvcc --version
    
    export PATH="/opt/conda/envs/warp/bin:$PATH"
    which WarpTools
    WarpTools --help | head -n 3
    
    which AreTomo2
    AreTomo2 | head -n 3 || echo "AreTomo2 exists (help output may vary)"
    
    echo "=== ALL TESTS PASSED ==="

%help
    This container includes both Warp and AreTomo v1.0.0.

%labels
    Author YourName
    Version 1.0.0
